[{"C:\\Users\\Shi Jia\\Desktop\\week\\week06\\demo\\demo1\\src\\index.js":"1","C:\\Users\\Shi Jia\\Desktop\\week\\week06\\demo\\demo1\\src\\reportWebVitals.js":"2","C:\\Users\\Shi Jia\\Desktop\\week\\week06\\demo\\demo1\\src\\App.js":"3","C:\\Users\\Shi Jia\\Desktop\\week\\week06\\demo\\demo1\\src\\component\\selector.tsx":"4"},{"size":1057,"mtime":1612516983421,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"6"},{"size":528,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":6398,"mtime":1612516902314,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"ydlerx",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":1,"source":"20","usedDeprecatedRules":"21"},"C:\\Users\\Shi Jia\\Desktop\\week\\week06\\demo\\demo1\\src\\index.js",[],["22","23"],"C:\\Users\\Shi Jia\\Desktop\\week\\week06\\demo\\demo1\\src\\reportWebVitals.js",[],["24","25"],"C:\\Users\\Shi Jia\\Desktop\\week\\week06\\demo\\demo1\\src\\App.js",[],"C:\\Users\\Shi Jia\\Desktop\\week\\week06\\demo\\demo1\\src\\component\\selector.tsx",["26","27","28","29","30","31","32","33"],"import React from 'react'\r\nimport './index.css'\r\n\r\ninterface item {\r\n    value: number;\r\n    text: string;\r\n}\r\ninterface Props_Type {\r\n    col: number,\r\n    Data: any,\r\n    onChange: (...arg:string[])=>void\r\n}\r\n\r\n// 搜索框\r\nclass Search extends React.Component<any>{\r\n    SearchInput:any\r\n    // SearchInput:any;\r\n    constructor(props: any) {\r\n        super(props)\r\n        this.SearchInput = React.createRef();\r\n    }\r\n    state = {\r\n        ipt: '',\r\n        filterDate: [],\r\n        isShow:true\r\n    }\r\n\r\n    handleChange=(e: any)=> {\r\n        this.setState({\r\n            ipt: e.target.value\r\n        })\r\n        let filterDate = this.props.Data.filter((v: item) =>\r\n            v.text.includes(this.state.ipt)\r\n        )\r\n        this.setState({\r\n            filterDate: filterDate\r\n        })\r\n\r\n    }\r\n    \r\n    showSelect =()=> {\r\n        if(!this.state.isShow){\r\n             this.setState({\r\n           isShow:true\r\n       })\r\n        }    \r\n    }\r\n\r\n    SubSearchResult=(e:any)=>{\r\n        // e.target.className=''\r\n        this.setState({\r\n        isShow:false\r\n        })\r\n       return this.props.getSearchValue(this.SearchInput.current.value)\r\n    }\r\n\r\n    hideSelect=()=>{\r\n       if(this.state.isShow){\r\n        this.setState({\r\n            isShow:false\r\n        })\r\n       }\r\n    }\r\n\r\n    InertToSearchInput=(e:any)=>{\r\n        this.setState({\r\n            ipt:e.target.innerHTML\r\n        })  \r\n        this.setState({\r\n            isShow:false\r\n        }) \r\n  \r\n    }\r\n\r\n    fnOver(e: any) {\r\n        e.target.className ='bgc'\r\n    }\r\n\r\n    fnOut(e: any) {\r\n        e.target.className =''\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className='search-container'>\r\n                    <input type=\"text\" ref={this.SearchInput} value={this.state.ipt} className='search'  \r\n                    onChange={this.handleChange}   onFocus={this.showSelect} />\r\n                    <button className='search-btn' onClick={(e)=>this.SubSearchResult(e)}>搜索</button>\r\n                    <ul id='search-drop-down' className={this.state.isShow?'show-select':'hide-select'} >\r\n                        {\r\n                        this.state.filterDate.map((v: item, i: number) => {\r\n                            return (\r\n                                <li key={i}  onMouseOver={this.fnOver}  \r\n                                onClick={(e)=>this.InertToSearchInput(e)} onMouseOut={this.fnOut}>\r\n                                {v.text}</li>\r\n                            )\r\n                        }\r\n                        )\r\n                        }\r\n                    </ul>\r\n                </div>  \r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n// 下拉框\r\nexport class Selector extends React.Component<Props_Type>{\r\n    \r\n    constructor(props: Props_Type) {\r\n        super(props)\r\n    }\r\n\r\n    res= document.getElementsByTagName('input')\r\n    CheckedBox=new Set()\r\n    state = {\r\n        checked: true,\r\n        allChoose: false,\r\n        CheckedBox:this.CheckedBox\r\n    }\r\n    handleSelectAll=(e: any) =>{\r\n        if (e.target.checked) {\r\n            this.setState({\r\n                allChoose: true\r\n            })\r\n            Array.from(this.res).map((v:any)=>{\r\n                v.checked=true\r\n                this.setState({\r\n                CheckedBox: this.CheckedBox.add(v.id)\r\n                })\r\n            })   \r\n        }\r\n        else{\r\n            this.setState({\r\n                allChoose: false,\r\n            })\r\n            \r\n            Array.from(this.res).map((v:any)=>{\r\n                v.checked=false\r\n            })\r\n            this.CheckedBox.clear()\r\n            this.setState({\r\n                CheckedBox:this.CheckedBox\r\n            })\r\n            console.log(this.state.CheckedBox);\r\n        }   \r\n        this.props.onChange( this.clearEmptyItem(Array.from(this.state.CheckedBox)))\r\n    }\r\n        getSearchValue=(value:string)=>{\r\n        let {Data}=this.props\r\n        let CheckedBox=new Array()\r\n        Array.from(Data).map((v:any)=>\r\n        {\r\n           if(v.text==value){ \r\n              CheckedBox.push(v.value)\r\n           } \r\n        })\r\n        Array.from(this.res).map((v:any)=>{    \r\n           if( CheckedBox.indexOf(Number(v.id))===0){\r\n               v.checked=true  \r\n               this.setState({\r\n                   CheckedBox:this.CheckedBox.add(v.id )\r\n               })    \r\n           }\r\n        })\r\n    this.props.onChange( this.clearEmptyItem(Array.from(this.state.CheckedBox)))\r\n    }\r\n\r\n    clearEmptyItem=(arg:any)=> arg.filter((v:any)=>v!='')\r\n    handleItemChecked=(e:any)=>{\r\n        if(e.target.checked){\r\n            this.setState({\r\n                CheckedBox:this.CheckedBox.add(e.target.id ) \r\n            })\r\n        }\r\n        else{\r\n            this.CheckedBox.delete(e.target.id)\r\n            this.setState({\r\n                CheckedBox:this.CheckedBox\r\n            })\r\n        } \r\n\r\n    this.props.onChange( this.clearEmptyItem(Array.from(this.state.CheckedBox)))\r\n    }\r\n    render(){\r\n        return (\r\n            <div className='container'>\r\n                <Search  Data={this.props.Data} getSearchValue={this.getSearchValue}/>\r\n                <div className='select-container'>\r\n                    <div> <input type=\"checkBox\" onChange={(e) => this.handleSelectAll(e)} />{this.state.allChoose?'select none':'select All'}</div>\r\n                    <div>\r\n                        {\r\n                            this.props.Data.map((v: item, i: number) => {\r\n                            let { col, Data } = this.props \r\n                            if (col=== undefined) { col = 1 }\r\n                            if (i % col === 0) {\r\n                            return <div key={i} className='items'>\r\n                                {Data.slice(i, (i % col === 0 ? i + col : i % col)).map((v: item) => {\r\n                                    let { text, value } = v\r\n                                    return  <span className='item' >\r\n                                        <input type='checkBox' id={String(value)} onChange={this.handleItemChecked} />{text}\r\n                                        </span>})}\r\n                                    </div>\r\n                            } else {return null}\r\n                            })\r\n                         }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}",["34","35"],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"36","replacedBy":"40"},{"ruleId":"38","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":111,"column":5,"nodeType":"44","messageId":"45","endLine":113,"endColumn":6},{"ruleId":"46","severity":1,"message":"47","line":127,"column":45,"nodeType":"48","messageId":"49","endLine":127,"endColumn":47},{"ruleId":"46","severity":1,"message":"47","line":139,"column":45,"nodeType":"48","messageId":"49","endLine":139,"endColumn":47},{"ruleId":"50","severity":1,"message":"51","line":152,"column":24,"nodeType":"52","messageId":"53","endLine":152,"endColumn":35,"fix":"54"},{"ruleId":"46","severity":1,"message":"47","line":153,"column":37,"nodeType":"48","messageId":"49","endLine":153,"endColumn":39},{"ruleId":"55","severity":1,"message":"56","line":155,"column":21,"nodeType":"57","messageId":"58","endLine":155,"endColumn":23},{"ruleId":"46","severity":1,"message":"47","line":159,"column":41,"nodeType":"48","messageId":"49","endLine":159,"endColumn":43},{"ruleId":"55","severity":1,"message":"59","line":170,"column":53,"nodeType":"57","messageId":"58","endLine":170,"endColumn":55},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],["60"],["61"],"@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","@typescript-eslint/no-array-constructor","The array literal notation [] is preferable.","NewExpression","useLiteral",{"range":"62","text":"63"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation",[3960,3971],"[]"]